\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename diegos.txi
@settitle DiegOS Design and Architecture Version 1.0
@c %**end of header
@copying 
This manual is for @acronym{DiegOS} release 1.0.

Compiled with @TeX{}.

Copyright @copyright{} 2012-2015 Diego Gallizioli.
@sp
@cartouche
@quotation
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see @url{http://www.gnu.org/licenses/}.
@end quotation
@end cartouche
@end copying

@afourpaper
@fonttextsize11
@titlepage
@title DiegOS Design and Architecture
@subtitle release 1.0
@author Diego Gallizioli 
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c So the toc is printed at the start.
@contents

@unnumbered Concepts
@section Inheritance and other inspirations
I think I wrote this incipit a dozen times, over and over again.
I am a tech guy, and I use to write technical documentation, not books.
Expressing ideas or feelings is much more demanding than explaining how
an algorithm works.

One of the many goals of an Operating System is to offer
a friendly and comfortable environment to developers.
This target is not easy to be met.

Another goal of an Operating System is to be as efficient as possible
not to compromise applications' performance, and this target is even harder.

I had the opportunity to work on several Operating Systems, lurking into internals to understand
how they work and how they were designed; I learned a lot and with a critical eye I made my assumptions
on how I would have achieved the same functionalities, features, performances.

@acronym{DiegOS} was born after years of careful and intensive meditation; it has no peculiarities,
a @abbr{@acronym{KISS}, Keep It Simple and Stupid} approach, no legacy constraints, and above all a humble
target: do the right thing, the easy way, the fastest way, avoiding common errors and nuisances.

Development of @acronym{DiegOS} took a lot of my spare time.
still, I cannot claim it to be a ``professional'' work; 
it is a hobbist toy for sure, probably a useful tool to play with, definitively not
a general purpose Operating System, although it can perform nicely as an embedded Operating System.

The most inspiring source of wisdom at the heart of @acronym{DiegOS} is Minix. 
I think of Minix as a virtual fitness room, furnished with all the tools you could ever dream of to work out your ideas in the most convenient way.
This @strong{does not imply} that Minix is the best Operating System out there, 
it simply means I found it a delightful environment to work with.
On the other side, the most inspiring source of reading at the heart of my programming skills is
@cite{GRAPHICS programming black book} by Michael Abrash;
all I have to say about it is, zenning is a very long journey, and you'd better take your time and read it.

With all that said, I suggest you now to have a break and practice your zen @enddots{}
@sp 3
@cartouche
Form is empty, emptiness is form, Emptiness is not other than form, form is also not other than emptiness.
Likewise, sensation, discrimination, conditioning, and awareness are empty. 

In this way, Sariputra, all things are emptiness; they are without defining characteristics; they are not born, they do not cease, they are not defiled, they are not undefiled. 
They have no increase, they have no decrease.

Therefore, Sariputra, in emptiness there is no form, no sensation, no discrimination, no conditioning, and no awareness. 
There is no eye, no ear, no nose, no tongue, no body, no mind. 
There is no form, no sound, no smell, no taste, no texture, no phenomenon. 
There is no eye-element and so on up to no mind-element and also up to no element of mental awareness. 
There is no ignorance and no elimination of ignorance and so on up to no aging and death and no elimination of aging and death. 

Likewise, there is no suffering, origin, cessation, or path; there is no wisdom, no attainment, and even no non-attainment.
@end cartouche
@page
@section Dedications
To my wife Monica and my kids Davide and Matteo, for being proud of my work (and letting me work at night on my projects!).
@page
@chapter Architecture
@section Code base structure
Source code is a versioned tree of folders.
@*Files organization follows a simple rule: platform dependent code must be separated
from platform independent code and every platform must be isolated from each other.
Common features or functionalities to be implemented in platform dependent code must export
common interfaces or a Hardware Abstraction Layer.

@section Portability
The source code of @acronym{DiegOS} is written in plain C, with a little amount of
assembler to perform hardware init.
Some drivers and some libraries' API do have a double personality, one implementation
in plain C and one implementation optimized in assembler; the former is totally portable,
the latter is welcome when performance gets on stage.
The system is not designed to run on 64-bit architectures, writing 32- and 64- compliant 
code requires a considerable amount of time, and time is a scarce resource when working at night!

@section Features
@acronym{DiegOS} is a single image application.
It offers concurrent software threads, 
a cooperative scheduler, shared structures to synchronize threads, 
a common interface to handle interrupts, a common driver infrastructure, 
and a common networking infrastructure.

@acronym{DiegOS} does not offer a native file system, and does not require one to boot.
Still, any file system can be added to the code base as a user level application.
@*@acronym{DiegOS} does not support multiple processors, multiple cores, or multiple hardware 
threads of execution; it does not offer memory protection or virtual memory, it does not offer pre-emption.

@section High level system structure
The system is partitioned as a functional set.

The core kernel API offers multi thread support, thread synchronization,
Input and Output support, common APIs for drivers, network interfaces, devices.
This set is completely independent from other libraries, APIs, or applications.

Kernel core needs platform dependent code to run properly, but it won't use 
platform specific calls: the kernel exports a specific abstract interface to perform
common tasks like enabling or disabling interrupts, switching context, using hardware clocks.

Drivers, network interfaces and devices are defined as a common set of function calls;
the core kernel APIs rely on these interfaces to access any hardware.

Drivers can access platform dependent code flawlessly@footnote{As a matter of fact the purpose
of writing a driver is to manage hardware, and hardware is the foundation of a platform.}, 
unless a driver is conceived to support multiple platforms, which is unlikely but possible.

Network interfaces and devices use common interfaces or the kernel API to manage Input and Output,
so they do not need to (and they should not) make use of platform dependent code.

Applications can use any API, the best practice is to avoid including 
variadic dependencies (i.e. do not include platform dependencies requiring separate builds or
the feared @code{#if @dots{} #endif} enclosures).
Networking code is one example of application code using software interfaces to access hardware
and other software with no platform dependencies.

@chapter Design
@section Software System design
@subsection Booting process
The rationale behind the booting stage is to have the most straighforward
solution, adaptable to any platform and any medium, with the least
interactions with the hardware.

To satisfy this requirement @acronym{DiegOS} has to be built as a binary image, 
statically linked and relocated to run at a specific address.
@*There is no support for alternate file formats, so there are no COFF, ELF or PE
loaders.
The default target will emit an ELF file and a binary file, 
to satisfy the needs of having a symbol reference for debugging, along with
all binutils capabilities.

From a high-level perspective, the booting stage consist in initializing the minimum required hardware, 
finding the @acronym{DiegOS} binary, loading it into memory, and running it.
Here follows a detailed setup procedure to have consistent booting steps across
any kind of platform; all platforms should adhere to this procedure to avoid adding
useless assembly code here and there, bloating the source code and making it less
portable:
@enumerate 1
@item Setup the host processor in order to execute the boot code; since you
are in charge of writing the boot code, it should be easy. Reserve a register
or a memory location to store debugging data like return values or failures.
Add comments to explain how this data can be used. Do not add debugging
infrastructures, traces, endless strings for printouts.
@item Access the medium where you stored the DiegOS binary, and read it into
memory. Document where the binary is put in memory, why it is put there, and
the memory layout during boot. The medium choice and the code required to
drive it
is up to you. The rationale here is, split your boot code if it grows beyond
logic; chain booting is not an option in this case.
@item Keep your code simple and stupid, do not try to optimize the load time
or the medium access time: access the hardware in a safe manner, load the OS
into memory, and run it.
@item Before jumping to the OS entry point verify this checklist:
@sp 1
@cartouche
@itemize
@item All registers are setup to start DiegOS: scratch registers should be
set to null, memory registers should be set to access the whole addressing
space; you could also restrict the range of available addresses, but you 
must ensure the OS is still able to access all the memory and all the hardware.
@item A small stack will be used by the system init stage, be sure to set
it up before jumping or you'll crash the machine.
@item All interrupts @b{must be disabled} prior to jumping to the
@acronym{DiegOS} entry point. 
@item Reserve some memory for booting variables.
@end itemize
@end cartouche
@sp 1
@item Jump to the system entry point, which is labelled as @t{DiegOS}.
Be careful not to perform a function call, but simply jump to the label;
calling implies using the stack, and setting a return address somewhere, which
is not expected to happen.
@footnote{The Operating System will not safely return to the boot code after a shutdown.}
@end enumerate
@page
@subsection System initialization
Initialization is split into a set of function calls, acting on both hardware and
software. 
@*The OS main entry point will perform this activity, and it will use the temporary stack
set up by the boot loader code. No code should be added in the main entry point, any platform
should implement the required function calls and link them into the kernel.
@*All @code{extern} functions are listed in a single header file for developers' delight.
@*The following table list the actions performed by the set of function calls, their order
is strictly reflected in the main entry point code.
@sp
@enumerate
@item Initialize the processor, including power save features, interrupts,
cache memory.
@item Initialize the platform hardware and software; usually you would init
heap and SoC devices here, as well as platform-dependent libraries (i.e.
malloc).
@b{Do not initialize} any kind of driver at this stage.
@item Disable all interrupts.
@item Initialize the TTY; depending on your platform, this can be a frame buffer,
a video card, a serial line; keep in mind that this is the system's TTY, and will be used
for debugging purposes only. You'll want to route @code{stderr} over here.
@item Initialize the kernel system libraries.
@item Initialize the drivers; details about the drivers infrastructure are
explained in section
@item Initialize the kernel.
@item Initialize applications, platform related features, add threads to perform specific tasks
at user's will.@footnote{Thread creation put the new thread into a ready queue, which means, it won't
be the new designated running thread. See @cite{Scheduler} in the following sections for details.}
@item Enable all interrupts.
@item Run the kernel, this actually roll the ball and kicks the scheduler.
@end enumerate

Items 1, 2, 3, 4, 6 and 8 are platform dependent and are to be implemented for every supported 
platform. 

@quotation Note
enabling and disabling interrupts @b{must support} recursion, please refer to the following
section for details.
@end quotation

@subsection The kernel
The core functionalities of @acronym{DiegOS} are enclosed in the kernel.
@*The kernel is a single instance, single processor component; it does not
support any kind of memory protection, and it is expecting to be able to access the
whole address space with no restrictions. As mentioned before, there could be restrictions
on the address space, but the OS must still be able to drive all the hardware and must
be able to access all the available memory (both @acronym{CPU} and @acronym{I/O} memory).

The main design choice at the foundation of @acronym{DiegOS} is a contention rule: 
context switching @b{must be voluntary}.
Interrupts service routines cannot switch context, the system cannot pre-empt threads execution.
A thread must voluntary invoke a suspension function, which in turn will invoke the kernel and
the scheduler to select a possible new running thread.
This implies that at least @b{one} thread must be running in the system at any time, this is called
the @code{idle thread}.

Since threads have the right to decide when they will suspend and yield the processor, they know
which resources are busy.
Common software synchronization APIs, namely semaphores, mutexes, barriers, spinlocks, read/write locks,
and so on can be used to retain exclusive access to resources while giving up to other threads.
Threads must still protect execution from interrupt routines, the only pieces of code that can abruptly
run and take control outside the scheduler's will.
Vital parts of the kernel are interrupt safe, so application code should not consider interrupts as a problem.
From another point of view, interrupt routines must stricly adhere to specific contraints in order to
avoid tainting the system.

The kernel does not support threads contention or access privilege, so any portion of
the code (and consequently any thread) is able to taint memory or access any
hardware device.
This is a questionable choice, prone to errors and security flaws.
A general purpose OS would not even mention memory protection or privileges as an option,
but an embedded OS must bear with limited resources and specific operations.
@acronym{DiegOS} is not a general purpose @acronym{OS} and relies on its developers skills for security and stability.

@subsection Kernel API
The kernel is designed to offer the following services: 
a thread scheduler, a thread management API, an alarm API, events queueing and dispatching, 
mutexes, barriers, @acronym{I/O} waits and spinlocks.
@*Alarms, Events and Mutexes are all managed services, meaning that an owning thread
can create, destroy, or reconfigure them at any time.
@*We will now go through each item in greater details.
@sp 

@table @dfn
@item Scheduler 
The @acronym{DiegOS} scheduler is as simple as possible; pre-emption is
not supported, and threads must co-operate in order to give up CPU time when
idling or waiting for peripherals.
Threads can be suspended, halted, delayed, and removed@footnote{Removal means the
thread will be killed.} but at least one thread must be ready to run at any time
@footnote{This is the Idle thread, which cannot be killed.}.

Ready threads are linked in lists.
The scheduler is designed to manage the threads' finite state machine and select 
the running thread by using a priority queue schema. There are four
priorities in @acronym{DiegOS}, namely @t{Idle Priority}, @t{Normal Priority}, 
@t{High Priority} and @t{Realtime Priority}.

When a thread is put in the ready queue, it will not substitute the running
one, not even if its priority is higher; pre-emption is @strong{not
supported} at all.

Whe a thread is created, it will be put into a ready queue for execution; since the
scheduler will not substitute the running thread, and it won't suspend it either,
the created thread is hairpinned for later execution.
At boot time the scheduler is not running yet, hence all created threads will hang
waiting in their respective ready queues.

The running thread can either suspend its execution yielding to ready threads, or
it can suspend not yielding to lower priority ready threads; in the former case the running
thread will suspend unconditionally, in the latter case the running thread will suspend if and only if 
there is a ready thread with a priority greater than or equal to.
In order to avoid CPU hogging you must be sure that all threads will either sleep or 
wait, and they should perform their processing as fast as possible;
if you cannot complete the required actions in a decent amount of time, you must split
operations in tokens and suspend execution at the end of each token.
Failing to do so will lock your processing into one thread only for an extended time frame.
@page
You can refer to the following figure for a visual description of the Scheduler State Machine.
@center @image{DiegOS_Scheduler_sm,,8cm,Scheduler State Machine,.jpg}
@item Threads 
A new, independent code path that can be alternated with several other code paths is
called a thread.
Whenever a thread hands over to another thread, the kernel stored the
CPU's context into the running thread's stack, and restore the context loading it from
the handed over thread's stack.

@t{Context} is defined as the set of registers and flags that differ from path to
path in the code.

Switching context is a platform dependent action, and can be freely implemented to suite
specific needs (i.e. ignore floating point or vector registers, handle flags, poll registers
or CPU state, etc.).
Keep in mind that context switching should be as fast as possible not to predate resources
dedicated to applications.
@item Alarms
A fundamental feature to let threads sleep and wake up at a
defined time. 
Alarms queue events to a thread with a specific class ID; handling alarms is just
like handling events. Alarms can be one-shot or recursive, and can be started or
halted anytime.

@item Events
Extensible system messages, used to signal something to a thread. 
Events are organized as queues (FIFO), and processed one by one in
chronological order.
There is no memory management for events, so the producer must take care of 
allocating memory when creating a message, while the consumer must
take care of releasing memory after processing the message.
Memory chunk managers, arrays, or static memory is strongly recommended to allocate
messages, as dynamic memory (heap memory) requires additional synchronization
between threads.

@item Mutexes
The simplest form of semaphore. A mutex is initially
unlocked; the first thread locking the mutex will proceed with execution,
entering a critical code section and running as long as it needs to.
Unless the mutex is unlocked, no other thread is allowed to enter the same
critical code section; other threads trying to lock the same mutex will sit in a
waiting queue. 
Once the first thread has released (unlocked) the mutex, the threads waiting for 
a lock will be run one at a time, until no waiting threads are left.
Once no thread is waiting for a lock on the mutex, the mutex is unlocked.

@item Spinlocks
A running, atomic wait to gain a lock on a integer used as a
barrier or mutex. Spinlocks can be locked or unlocked.
@*A thread trying to acquire a spinlock will enter an infinite loop until the lock is 
gained, so if the spinlock is originally locked, the thread will suspend and enter
the ready queue continuosly.
@*Good use of spinlocks is to protect very short critical sections or hardware accesses,
where the longer code path required to manage mutexes might be an issue.

@item Barriers
The easiest way to synchronize tasks is to have them wait on a common object, capable of
unlocking all threads at once.
This can be achieved by creating a barrier.
A barrier has 2 states: locked and unlocked. When the barrier is created the locked state is set.
When the barrier is unlocked, all waiting threads are put on the respective ready queues.
Trying to sleep on an unlocked barrier is a no-op.
A barrier can be locked or unlocked at will, the thread locking the barrier will not be suspended
by the lock.

@item @acronym{I/O} waits
Software must interact with hardware through drivers.
Hardware runs autonomously and generates spontaneus events to notify a change or to request
attention.
Software can control hardware when performing @acronym{I/O} operations writing or sending 
data to the hardware device, but cannot predict when the hardware will be ready to send data
to the software.
For that purpose a dedicated API is available to let threads wait for hardware events.
A corresponding API is available to let drivers notify the waiting threads there is some work
for them.
@end table

@subsection Interrupts
Interrupt routines need careful handling as stressed in the previous chapters.
All code servicing interrupts will run in interrupt context, @b{not} in the running thread context.

While in interrupt context no memory can be allocated or released, no synchronization API can
be invoked, no switching context can be performed; the only allowed interaction with the kernel 
or threads is via events.
Static memory can be accessed, as well as dynamic data structures, provided that their scope and use
are limited (in other words, they are @code{static} and not public).

@section Hardware Systems support
The system has been designed to support multiple hardware platforms, assuming that all
platforms are organized as a layered pyramid of devices: on top the @acronym{CPU}, then the 
system busses and peripherals@footnote{The main target of @acronym{DiegOS} are embedded
systems, and they mostly use @acronym{SoC}, so @acronym{CPU} and peripherals could be
seen as a whole, but this assumption would break support for general purpose platforms.},
finally hardware devices@footnote{With devices we address network cards, graphic cards,
keyboards, and so on.}.
@acronym{DiegOS} offers different options for these three layers.

@subsection Processors
Every processor should have its own platform dependent folder, and must declare its own
@code{#define} to uniquely identify code or build targets.
The defined values can be used in both makefiles and source code to force the inclusion
of specific header files, dedicated to support @acronym{CPU} peculiarities like endianness,
register size, thread context contents, context load and store.
Since this code is processor dependent it should never use common APIs or application-oriented
code, and it should be isolated from the ``outer'' folders, in other words, the code should not
include any file unrelated to the @acronym{CPU} itself.

@subsection System busses and peripherals
Busses and peripherals are unique features of a platform.
Platforms come seldom with variants like different interrupt controllers, different system clocks,
a default serial for debugging, but also different processors.
All variants should be traced as different platforms under @acronym{DiegOS}, so that the proper
@acronym{CPU} support can be included and linked.
As for processors, every platform should have its own platform dependent folder, and must declare
its own @code{#define} to uniquely identify the build targets.

@subsection hardware devices
Drivers are collected under a special folder under @acronym{DiegOS}@footnote{The folder has an intuitive and original name: ``drivers''!}.
Every driver should have its own subfolder, and drivers are allowed to directly include platform-
 or @acronym{CPU} dependent code@footnote{Quite obviously holds true @b{only} for dedicated
drivers. Multi platform drivers have different requirements.}.
Devices requiring asynchronous notifications can use the @acronym{I/O} wait API to wake up
sleeping threads.

@section Recommendations and other suggestions
The core functionalities are very simple: spawn a number of execution threads, run all
of them one by one, interrupts @emph{cannot and must not} invoke a context switch,
synchronize the execution by suspension, share resources with mutexes or spinlocks.

A few words about mutexes and spinlocks and their pros and cons: mutexes have a more complex
code path and disable or enable interrupts to avoid contention within the scheduler, while
spinlocks are very light and simple.
From another point of view, a thread waiting to acquire a lock on a mutex will enter a wait queue, 
thus it will sit and wait until its time has come to run and gain a lock; a thread waiting to
acquire a lock on a spinlock will continuosly suspend and thus will be rescheduled until its
time has come to gain a lock.

The balance is, more complexity but lesser CPU usage, opposed to extreme simplicity but a busy CPU.
My suggestion is to use spinlocks for very fast and short critical sections, whereas managing mutexes
would be worser and slower; make use of mutexes if you need heavy computations inside the critical 
section, as all other contending thread will be waiting and won't be scheduled at all, freeing up the 
CPU and letting the locking thread complete its tasks as fast as possible.

@summarycontents
@bye
