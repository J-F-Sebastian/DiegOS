\documentclass[a4paper, fontsize=12, parskip=half-]{scrbook}
\usepackage[dvipsnames]{xcolor}
\usepackage[english]{babel}
\usepackage{textcomp}
\usepackage{chapterthumb}
\usepackage{scrlayer-scrpage}
\AddLayersToPageStyle{@everystyle@}{chapterthumb}
\addtokomafont{chapterthumb}{\bfseries}
\usepackage{setspace}
\onehalfspacing
\usepackage{listings}
\usepackage{tikz}
\usetikzlibrary{shapes,arrows}

\begin{document}
\subject{Documentation}
\title{DiegOS}
\subtitle{Design and Implementation of a minimalistic Operating System}
\author{Diego Gallizioli}
\date{\today}
\uppertitleback{
DiegOS\\
Design and Implementation of a minimalistic Operating System\\
Copyright \textcopyright \today \\
Diego Gallizioli
}
\lowertitleback{This document was set with the help of {\KOMAScript} and
{\LaTeX}}
\dedication{To my wife Monica and my children Davide Matteo and Anna, for letting me sit in front of my computer late at night.}
\maketitle

\tableofcontents

\chapter{Concepts}
\section*{Inheritance and other inspirations}
I approached the world of computing when I was 8 years old.
My father bought a Commodore C64 after an intensive and extensive search throughout most of the electronics shops
available.

His target --- having me and my brother understand what a computer could do --- was partially met: I went on to become an engineer,
my brother chose a different path.\footnote{He is a doctor now.}
I still remember when I asked for a more powerful computer: my intense desire was to explore the unknown universe of the then innovative AMIGA
platform, but when I had to explain this idea to my father, I failed; to his eyes the Commodore machines were merely videogames.
I succeded in replacing my beloved C64 with an i8086-based personal computer running MS-DOS version 3.3 (\textbf{yes}, version 3.3 !)
and from then on I got more and more interested in two aspects of computing: transmitting data and having software interact with hardware.

While attending university my curiosity for operating systems became a top interest.
This interest eventually led me to try to write an operating system by myself.
Developing a full-blown operating system as a spare time activity proved to be really challenging, besides, there are way too much
OS in the world.
Still, as a professional software developer I approached the embedded systems and found an interesting niche to work on.
This is why I wrote DiegOS.

From my personal standpoint the main goal of an Operating System is to offer a friendly and comfortable environment
for both programmers, users, and administrators, or in other words, offer an effective interface to the underlying hardware.
Scoring this goal is not easy: since the very first Operating System inception, a huge number of engineers 
and scientists worked to develope concepts, ideas, architectures, interfaces, and documenting 
their work to produce what we know today as Microsoft Windows, Linux, Unix, or Apple Inc. macOS.
All these people proved to be smarter than the Author of this book.

Up today I had the chance and the privilege to work on a number of Operating Systems,
some of them with peculiar features, some of them with legacy constraints, most of
them with a clear design.
DiegOS was born after years of careful and intensive meditation; it has no peculiarities,
a KISS \footnote{The acronim stands for Keep It Simple, Stupid.} approach, no legacy constraints, and above all a humble
target: do the right thing, the easy way, the fastest way, avoiding common errors and nuisances.

Development of DiegOS took a lot of my spare time, still I did not conceive all the contents of this book by myself;
the most inspiring source of wisdom at the heart of DiegOS is Minix. 
Minix is definitively a fitness room, furnished with all the whistles and bells and tools you could ever dream of.
This \textbf{\emph{does not imply}} that Minix is the best Operating System out there, 
it simply means I consider it a delightful piece of code.

Besides, the most inspiring source to improve my programming skills was
Michael Abrash's \emph{Graphics Programming Black Book};
all I have to say about it is, zenning is a very long journey, and you'd better take your time and read it.

Last but not least, writing software requires patience. Resilience to failure. Acceptance of personal limits.
Acknowledge of success when new code runs the way it should.
Understanding of the true nature of software: vacuity. Because all software of any kind under any form is
essentially an abstract algorithm performing elementary actions faster than our mind.
The creator of all software \textbf{is} our mind, but \textbf{no software can replace} our mind.

Still they both are ephemeral, abstract.
This is why I leave to the reader an abstract taken from \quote{The Sutra of the Heart}.

Enjoy my book, I hope you will enjoy my software.

\newpage

\emph{" Form is empty, emptiness is form, Emptiness is not other than form, form is also not other than emptiness.
Likewise, sensation, discrimination, conditioning, and awareness are empty.}

\emph{In this way, Sariputra, all things are emptiness; they are without defining characteristics; they are not born, they do not cease, they are not defiled, they are not undefiled. They have no increase, they have no decrease.}

\emph{Therefore, Sariputra, in emptiness there is no form, no sensation, no discrimination, no conditioning, and no awareness. There is no eye, no ear, no nose, no tongue, no body, no mind. There is no form, no sound, no smell, no taste, no texture, no phenomenon. There is no eye-element and so on up to no mind-element and also up to no element of mental awareness. There is no ignorance and no elimination of ignorance and so on up to no aging and death and no elimination of aging and death. Likewise, there is no suffering, origin, cessation, or path; there is no wisdom, no attainment, and even no non-attainment.''}
\vfill

\mainmatter
\chapter{Architecture}
\section{Design}
DiegOS has been designed to be a simple application running on top of bare metal.
It is compiled and linked as a single binary image, a single process application able to run 
concurrent threads of execution by means of a co-operative scheduler.
The software is partitioned in layers with defined dependencies between modules;
DiegOS does not support multiple processors,  multiple cores, or multiple hardware 
threads of execution; it does not offer memory protection or swappable memory,
and does not offer preemption.
the \textbf{kernel} is composed of several items like a mutex manager to coordinate
concurrency between threads, an alarm manager to implement timers, an event manager
to exchange messages between threads, barriers, spin locks, I/O support for drivers.
The inner part of the core is all about thread management and is not directly exposed
to other modules, its components are the scheduler and the idle thread; a kernel API 
is provided to access these components from threads.

% Define block styles
\tikzstyle{block} = [rectangle, draw, fill=Cyan, 
    text width=5em, text centered, rounded corners, minimum height=5em]
\tikzstyle{block2} = [rectangle, draw, fill=Goldenrod, 
    text width=5em, text centered, rounded corners, minimum height=5em,
    minimum width = 20em]
\tikzstyle{addon} = [rectangle, draw, fill=Cerulean, 
    text width=5em, text centered, rounded corners, minimum height=5em,
    minimum width = 20em]
\tikzstyle{plat} = [rectangle, draw, fill=WildStrawberry,
    text width=5em, text centered, rounded corners, minimum height=5em]
\tikzstyle{user} = [rectangle, draw, fill=Gray, 
    text width=5em, text centered, rounded corners, minimum height=5em]
\tikzstyle{user2} = [rectangle, draw, fill=Gray, 
    text width=5em, text centered, rounded corners, minimum height=5em,
    minimum width = 20em]
\tikzstyle{line} = [draw, -latex']
    
\begin{tikzpicture}[node distance = 2cm, align=center]
  % Place nodes
\node [block] (scheduler) {scheduler};
\node [block, right of=scheduler, node distance=5em] (events) {event manager};
\node [block, right of=events, node distance=5em] (IO) {I/O manager};
\node [block, right of=IO, node distance=5em] (alarms) {alarms manager};
\node [block, right of=alarms, node distance=5em] (mutexes) {mutexes};
\node [block, right of=mutexes, node distance=5em] (barriers) {barriers};
\node [plat, right of=barriers, node distance=5em] (plat) {platform components};
\node [block2, below of=alarms, node distance=15em] (kernel) {kernel};
\node [addon, below of=kernel, node distance=7em] (drivers) {drivers};
\node [addon, right of=drivers, node distance=7em] (libs) {libraries};
\node [user, below of=drivers, node distance=10em] (devices) {devices};
\node [user, right of=devices] (fs) {file system};
\node [user, right of=fs] (net) {networking};
\node [user2, below of=devices] (user) {user applications};

   % Draw edges
 \path [line] (scheduler) -- (kernel);
 \path [line] (events) -- (kernel);
 \path [line] (IO) -- (kernel);
 \path [line] (alarms) -- (kernel);
 \path [line] (mutexes) -- (kernel);
 \path [line] (barriers) -- (kernel);
 \path [line] (plat) -- (kernel);
 %\path [line, dashed] (plat) -- (kernel);
 %\path [line, dashed] (kernel) -- (plat);
 %\path [line, dashed] (drivers) -- (devices);
\end{tikzpicture}

The managers handle shared structures that can be used to synchronize threads in different ways: 
\textbf{mutexes} can be used to grant exclusive access to shared data, \textbf{barriers} can be used 
to implement step-lock synchronization, \textbf{spin locks} can protect critical sections.

The system can be easly extended to support different platforms or devices making use of its driver infrastructure.
Specific platform dependencies like processor initialization, interrupt support and others are defined as a platform-dependent
API and its implementation is required in order to compile and link the kernel; while this code is not part of the kernel itself, its interface
is defined in the kernel, in order to implement a virtual interface for all hardware.
The kernel will access specific hardware features through generic function calls, implemented in a Board Support Package or in 
platform-dependent modules; this way the core of the system is unique, and can be linked with modules supporting different hardware.

System libraries as well as a \textbf{libc} implementation are part of DiegOS, application code can leverage on these
APIs to use queues, lists, binary trees, hashed data structures, and to encrypt, encode or compress data.

The system is able to compile and link source code written in C and C++, and supports Object Oriented Programming.

The native file system that comes with DiegOS is a variant of the Microsoft FAT16 file system; it is not compatible with
the original FAT16 and at the time of this writing does not support flash memory type devices.

\section{Portability}
The source code of DiegOS is written in plain C, with a little amount of
assembler to perform hardware init.
Some drivers and some libraries' API do have a double personality, one implementation
in plain C and one implementation optimized in assembler; the former is totally portable,
the latter is welcome when performance gets on stage.
The system is not designed to run on 64-bit architectures, writing 32- and 64-bit compliant 
code requires considerable time (and time is a scarce resource!).
\footnote{writing code able to compile and run on both 32- and 64-bit processors would break
the rule of simplicity.}
The system supports compiling and linking source files written in C++ using classes and objects.

\section{build system}
The code base of DiegOS builds using makefiles and the make tool; output object code is stored in dedicated directories
named after the platform/CPU configured for the specific build.
Due to this choice it is possible to build several binary images in the same workspace without generating
conflicts.
It is also easier to add platform specific optimizations inside general purpose modules as all makefiles
are aware of the platform/CPU options.

\chapter{System}
\section{Design}
\subsection{Booting process}
The rationale behind the booting stage is to have the most straighforward
solution, adaptable to any platform and any medium, with the least
interactions with the hardware.

To satisfy this requirement DiegOS has to be built as a binary, relocated
to start at a specific address, obviously the same that will be used to 
load it and run it.\\
There is no support for alternate file formats, so there are no COFF, ELF or PE
readers.
The default target will emit an ELF file along with the binary format, 
to satisfy the needs of having a symbol reference for debugging, along with
all binutils capabilities.
In case the target EABI does not support the ELF format, any other object file
format can be used; just be aware you always need to emit a binary file to
load and execute the OS.

There is a detailed setup procedure to have consistent booting steps across
any kind of platform; all platforms should adhere to this procedure to avoid adding
useless assembly code here and there, bloating the source code and making it less
portable:
\begin{enumerate}
\item Setup the host processor in order to execute the boot code; since you
are in charge of writing the boot code, it should be easy. Reserve a register
or a memory location to store debugging data like return values or failures.
Add comments to explain how this data can be used. Do not add debugging
infrastructures, traces, endless strings for printouts.
\item Access the medium where you stored the DiegOS binary, and read it into
memory. Document where the binary is put in memory, why it is put there, and
the memory layout during boot. The medium and the code required to
access it is up to you. The rationale here is, split your boot code if it grows beyond
logic; chain booting is not an option in this case.
\item Keep your code simple and stupid, do not try to optimize the load time
or the medium access time: access the hardware in a safe manner, load the OS
into memory, and run it.
\item Before jumping to the OS entry point go through this checklist:

    \begin{minipage}{0.9\textwidth}
    \begin{enumerate}
    \item All registers are setup to start DiegOS: scratch registers should be
    set to null, memory registers should be set to access the whole addressing
    space; you could also restrict the range of available addresses, but you 
    must ensure the OS is still able to access all the memory and all the hardware.
    \item A small stack will be used by the system init stage, be sure to set
    it up before jumping or you'll crash the machine.
    \item All interrupts \textbf{must be disabled} prior to jumping to the
    DiegOS entry point. 
    \end{enumerate}
    \end{minipage}

\item Jump to the system entry point, which is labelled as \texttt{DiegOS}.
Be careful not to perform a function call, but simply jump to the label;
calling implies using the stack, and setting a return address somewhere, which
is not expected to happen.\footnote{No Operating System returns to the boot
code after a shutdown.}
\end{enumerate} 
\subsection{System initialization}
Initialization is split into a set of function calls, acting on both hardware and
software. 
\begin{itemize}
\item Initialize the uninitialized data memory space (i.e. the .BSS section in
ELF format terminology).
\item Initialize the processor, including power save features, interrupts,
cache memory.
\item Initialize the platform hardware and software; usually you would init
heap and SoC devices here, as well as platform-dependent libraries (i.e.
malloc).
\textbf{Do not initialize} any kind of driver at this stage.
\item Initialize the TTY; depending on your platform, this can be a frame buffer,
a video card, a serial line; keep in mind that this is the system's TTY, and will be used
for debugging purposes only.
\item Initialize the drivers; details about the drivers infrastructure are
explained in section \ref{sub:drivers} at page \pageref{sub:drivers}
\item Initialize the kernel
\item Enable all interrupts
\item Initialize the users' additions, threads added to perform specific tasks
at user's will.
\item Run the kernel, this actually roll the ball and kicks the scheduler.
\end{itemize}

\subsection{The kernel}
The core functionalities of DiegOS are enclosed in this library.
The kernel is a single instance, single processor component; it does not
support any kind of memory protection, and it is expecting to be able to access the
whole address space with no restrictions. As mentioned before, there could be restrictions
on the address space, but the OS must still be able to drive all the hardware and must
be able to access all the memory.
The kernel does not support threads contention or access privilege, so any portion of
the code (and consequently any thread) is able to peek or poke any memory location or 
access any hardware device.
This is questionable choice, although it is nothing the God of Information wouldn't let you in 
heaven for \\footnote{you can guess where the citation comes from ...}.
All in all, a general purpose OS would not even mention memory protection as an option; 
again, if you need the real thing, go get it. A small bare-metal system would require lots
of resources to assure a decent level of security if implementing memory protection,
and this is not a goal for DiegOS.

\subsection{Kernel services}
The kernel offers the following services: a thread scheduler, a thread management API, 
an alarm API, events queueing and dispatching, mutexes, barriers, I/O waiting and spin locks.\\
Alarms, Events and Mutexes are all managed services, meaning that an owning thread
can create, destroy, or reconfigure them at any time.

\begin{description}
\item[The Scheduler] the DiegOS scheduler is as simple as possible, and is implemented as a FIFO
queue with several priority levels. Pre-emption is not supported, and threads must co-operate in
 order to give up CPU time when computing is not required.

Threads can be suspended, halted, delayed, and removed\footnote{Removal means the
thread will be killed.} but at least one thread must be ready to run at any time
\footnote{This is the Idle thread, which cannot be killed.}.

% Define block styles
\tikzstyle{idle} = [rectangle, draw, fill=TealBlue, 
    text width=5em, text centered,node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{norm} = [rectangle, draw, fill=Cerulean, 
    text width=5em, text centered, node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{high} = [rectangle, draw, fill=Goldenrod, 
    text width=5em, text centered, node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{rt} = [rectangle, draw, fill=Magenta, 
    text width=5em, text centered, node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{idle1} = [rectangle, draw, fill=TealBlue!50, 
    text width=5em, text centered,node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{norm1} = [rectangle, draw, fill=Cerulean!50, 
    text width=5em, text centered, node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{high1} = [rectangle, draw, fill=Goldenrod!1, 
    text width=5em, text centered, node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{r1t} = [rectangle, draw, fill=Magenta!1, 
    text width=5em, text centered, node distance=3cm, rounded corners, minimum height=6em]
\tikzstyle{line} = [draw, -latex']
\tikzstyle{run} = [circle, draw, fill=BurntOrange, 
    text width=5em, text centered, node distance=4cm,  minimum height=5em]

\begin{tikzpicture}[node distance = 3cm, outer sep=auto, inner sep=1em, thick]
  % Place nodes
\node [run] (run) {Running Thread};
\node [idle, , below left of=run, node distance=5cm] (idle) {IDLE};
\node [idle1, below of=idle] (idle1) {thread 1};
\node [idle1, below of=idle1] (idle2) {thread 2};
\node [idle1, below of=idle2] (idlen) {thread N};
\node [norm, right of=idle, node distance=3cm] (norm) {NORMAL};
\node [norm1, below of=norm, node distance=3cm] (norm1) {thread 1};
\node [norm1, below of=norm1, node distance=3cm] (norm2) {thread 2};
\node [norm1, below of=norm2, node distance=3cm] (normn) {thread M};
\node [high, right of=norm, node distance=3cm] (high) {HIGH};
\node [high, below of=high, node distance=3cm] (high1) {thread 1};
\node [high, below of=high1, node distance=3cm] (highn) {thread O};
\node [rt, right of=high, node distance=3cm] (rt) {REALTIME};
\node [rt, below of=rt, node distance=3cm] (rt1) {thread P};

   % Draw edges
 \path [line, dashed] (idle) --  (run);
 \path [line, dashed] (norm.north) -- (run);
 \path [line, dashed] (high.north) -- (run);
 \path [line, dashed] (rt.north) -- (run);
 \path [line, ultra thick] (norm) -- (idle);
 \path [line, ultra thick] (high) -- (norm);
 \path [line, ultra thick] (rt) -- (high);
 \path [line] (idle) -- (idle1);
 \path [line] (idle1) -- (idle2);
 \path [line] (idle2) -- (idlen);
 \path [line] (norm) -- (norm1);
 \path [line] (norm1) -- (norm2);
 \path [line] (norm2) -- (normn);
 \path [line] (high) -- (high1);
 \path [line] (high1) -- (highn);
 \path [line] (rt) -- (rt1);
\end{tikzpicture}

The scheduler is designed to manage the threads' finite state machine and select 
the running thread by using a priority queue schema. There are four
priorities in DiegOS, namely \texttt{Idle Priority}, \texttt{Normal Priority}, 
\texttt{High Priority} and \texttt{Realtime Priority}.

When a thread is in the ready queue, it will not substitute the running
one, not even if the ready thread's priority is higher; pre-emption is \textbf{not
supported} at all.
The running thread must give up by suspending or waiting on some shared resource to let
the scheduler select another running thread.

The scheduler will loop the highest priority queue with at least a ready thread until the
list is void; the list will be empty when all the threads with that priority have suspended or have
been killed.
This implies that all threads in a specific ready queue will run at least once before being evicted
from the list itself.
Lists are browsed in decreasing priority order down to \texttt{Idle priority} where at least one ever-running
thread is expected to exists.

Whatever the thread's priority might be, a thread owns the system until suspending or waiting: care must be taken
in writing application code processing data to avoid hogging the CPU or - definitively worser - starving other
threads.

Bear in mind that a higher priority thread will never give up for a lower priority
thread; to avoid CPU hogging you must be sure that all threads will either sleep or 
wait or delay, and they should perform their processing as fast as possible;
if you cannot complete the required actions in a decent amount of time, you must split
operations and run them in chunks, suspending the thread between runs;
failing to do so will starve all threads exept the running one.
Even if this might be a desired behavior, it is really dangerous and might generate unwanted effects
on accounting or performance monitoring.

\item[Threads] a thread is a new independent code path starting from a
function (used as entry point) that can be alternated with other code paths.
Whenever a thread hands over to another thread, the kernel has to store the
CPU's context into the running thread, and restore the context loading it from
the handed over thread.
Context is defined as the set of registers and flags that differ from path to
path in the code.\\
Along with the processor context a distinctive feature of a thread is its \textbf{stack}.
The stack pointer (which is usually part of the processor context) must be saved and restored
and stack memory areas \textbf{must not} be corrupted at any time, or the distinctive backtrace of 
code paths would break leading to memory corruptions or crashes.

\begin{tikzpicture}[->,  outer sep=auto, inner sep=1em, thick, node distance=4cm]
\node [circle,fill=gray!30,draw] (IDLE) {IDLE};
\node [circle,fill=green!60,draw] (READY) [below of=IDLE] {READY};
\node [circle,fill=orange!60,draw] (RUN) [below of=READY] {RUN};
\node [circle,fill=gray!30,draw] (KILL) [below  of=RUN] {KILL};
\node [circle,fill=blue!60,draw] (SLEEP) [left of=KILL] {SLEEP};
\node [circle,fill=blue!60,draw] (WAIT) [right of=KILL] {WAIT};
\path
(IDLE)     edge [dashed, loop above] node [right] {On creation} (IDLE)
(IDLE)     edge [dashed] node [right] {After creation} (READY)
(READY)  edge node [right] {Scheduled} (RUN)
(RUN)      edge [bend left=60]  node [left]{suspend} (READY)
(RUN)      edge node [left]{sleep} (SLEEP)
                edge node [left] {wait} (WAIT)
               edge [dashed] node [left] {killed} (KILL)
(SLEEP)   edge [bend left=60] node [left] {wake up} (READY)
(WAIT)   edge [bend right=60] node [right] {wake up} (READY);
\end{tikzpicture}

Threads can be in four stable states, namely \texttt{RUN, WAIT, SLEEP,  READY}, and two transient states
 \texttt{IDLE} and \texttt{KILL}.
The latter are transient by definition as they designate a thread which has been created but never run (\texttt{IDLE})
and a thread scheduled to be killed (\texttt{KILL})
\footnote{A thread is not killed upon call to a specific kernel interface, it is inserted in a temporary queue for later disposal.}.\\
Threads can be promoted from the \texttt{READY} state to the \texttt{RUN} state  by the scheduler internals only;  the reverse action is performed by \textit{suspension} function calls.\\
Kernel APIs can change the \texttt{RUN} thread state to \texttt{WAIT} state by means of \textit{sleeping} functions or \textit{suspension points}.
\footnote{Kernel suspension points are mutexes, barriers, I/O waits.}

\item[Alarms] are a fundamental feature to let threads sleep and wake up at a
defined time. 
Alarms are events queued to a thread with a specific class ID; handling alarms is just
like handling events. Alarms can be one-shot or recursive, and can be started or
halted anytime.
\item[Events] are extensible system messages, used to signal some interesting news to a thread. 
Events are organized as queues (FIFO), and processed one by one in
chronological order.\\
Memory management for events is optional,  both the producer and the
consumer must take care of allocating memory when creating an event message,
and freeing it once the event has been processed. The producer can create events
with no memory-free handler, in this case the consumer will not release the event storage;
if a memory-free handler is set, the consumer will invoke it passing a pointer to the event
as a parameter to the handler.\\
\textbf{Important:} the memory release handler (memory-free handler) is executed in
the \textit{consumer} thread's context, possibly out of control of the producer's thread;
if events are created on the heap a synchronization mechanism must be put in place to
avoid corrupting data structures.
\item[Mutexes] are the simplest form of semaphore. A mutex is initially
unlocked; the first thread trying to acquire a lock on the mutex will actually get the lock
and proceed with execution, entering a critical code section and running as long as it needs to.
Unless the mutex is unlocked, no other thread is allowed to enter the same
critical code section; other threads trying to acquire a lock on the same mutex will sit in a
waiting queue. 
Once the first thread has released (unlocked) the mutex, the threads waiting for 
a lock will be run one at a time, until no waiting threads are left; every thread entering the
critical section is guaranteed to have acquired a lock on the mutex, which means, 
code after the lock acquisition function is guaranteed to run helding a lock on the mutex.\\
Once no thread is waiting for a lock on the mutex, the mutex is left unlocked.
\item[Spin locks] are a running  atomic delay to acquire a lock on a integer used as a
barrie. Spin locks can be locked or unlocked.\\
A thread trying to acquire a spin lock will enter an infinite loop until the lock is 
gained, so if the spin lock is originally locked, the thread will suspend and enter
the ready queue continuosly.\\
Good use of spin locks is to protect very short critical sections or hardware accesses,
where the longer code path required to manage mutexes might be not as efficient.
\item[I/O waits] are wait queues, useful to suspend the calling thread execution till 
data is available, this usually happens while waiting for input from a hardware device.\\
The suspended thread is removed from the ready queue and parked into a wait queue, multiple
threads can sleep on the same wait queue, and can be awakened in groups.\\
Threads are moved from wait queues to ready queues in a FIFO fashion, and it is not possible
to priorize or sort this sequence.
\item[Barriers] are a form of cumulative mutual exclusion, useful to suspend execution of several
threads waiting for a single shared resource to be available.\\
Barriers are \textit{closed} upon creation, and can be opened or closed by any thread; an open barrier will
resume \textbf{all} the waiting threads at once moving them into their respective \textit{ready queues}.\\
Optionally a barrier can automatically close after opening, creating a step-lock software gate.
\end{description}

\subsection{Drivers}
\label{sub:drivers}
Drivers in DiegOS are interfaces to hardware.
They enable software to start and stop hardware operations, configure it, and perform input and output.
Common operations performed by drivers include enabling and handling interrupts: the pertinent code must
be carefully designed to avoid conflicts with the system-wide interrupt handling.
DiegOS protects critical sections by enabling and disabling interrupts, and these operations \textbf{are not}
designed to be reentrant.
The system-wide interrupt handler will invoke the registered callback with the corresponding interrupt \textbf{off},
and will enable the interrupt back again once the servicing routine returns.

There is a common interface for all drivers, and common rules to specify functions.\\
All functions returning a status will return an \texttt{int} value.\\
All functions returning a size will return an \texttt{unsigned int} value.\\
Drivers are multi-instance, as a consequence all function prototypes must specify an \texttt{unsigned int} unit number
as last parameter.

The \texttt{init} function can be used to initialize the driver for a specific instance
\footnote{An instance matches a hardware device, a single driver can handle multiple devices.}
but \texttt{not} actually make the device run.

Functions \texttt{start} and \texttt{stop} can run the hardware activities or stop them, this includes enabling or disabling
interrupts, DMA transfers, I/O operations, sensors polling, and so on.
It is assumed that alternating calls to \texttt{start} and \texttt{stop} will make the hardware device either work or not work,
but will not change its configuration or power state.

Function \texttt{done} can be used to terminate the driver and shut down the hardware device. This operation is \textbf{not reversible}
in contrast with the \texttt{start} and \texttt{stop} functions. Once \texttt{done} has been invoked it is required to call \texttt{init} again
to reset the device to defaults and reconfigure it.

Function \texttt{status} can be called at any time to report the driver's internal state, the ongoing operation, and the driver's specialization
\footnote{Drivers have different extensions for different kind of hardware devices: block devices, character devices, graphics, networking}.

\begin{lstlisting}[language=C,basicstyle=\small\ttfamily,backgroundcolor=\color{gray!10!white},keywordstyle=\bfseries\color{green!40!black},
commentstyle=\color{orange!60!black},identifierstyle=\itshape\color{cyan!60!black}, stringstyle=\color{red!60!black}]

typedef struct driver_header {
    /*
     * Name of the driver, to be filled at compile time.
     */
    char name[DRV_NAME_LEN + 1];
    /*
     * Init function, it is to be invoked at startup 
     * to discover the supported devices,
     * assign resources for all units, 
     * and init the device.
     * Note: init does not mean start, run,
     *           enable interrupts, enable DMA.
     *           The kernel will not be able to handle 
     *           events to or from devices until
     *           the start_fn function is invoked.
     *           The device should be configured to 
     *           be ready to start working but kept
     *           reset or idle.
     * Return values:
     * EOK in case of success (device unit inited)
     * ENXIO in case the unitno is not supported 
     *            or inited
     * other errnos for failures
     */
    int (*init_fn)(unsigned unitno);
    /*
     * Start the device's operations.
     *  This include interrupt handlers, DMA, 
     * I/O activities.
     */
    int (*start_fn)(unsigned unitno);
    /*
     * Stop the device's operations. 
     * This include I/O activities as well as events,
     * but the device should not fail or be reset.
     * Calling start_fn again the device should recover
     * gracefully and start working.
     */
    int (*stop_fn)(unsigned unitno);
    /*
     * This function should shut down the device.
     * It will be invoked on shutdown/reboot
     * of the kernel.
     */
    int (*done_fn)(unsigned unitno);
    /*
     * Retrieve the driver status
     */
    unsigned (*status_fn)(unsigned unitno);
   /*
     * I/O control, driver specific
     */
    int (*ioctrl_fn)(void *data,
			unsigned opcode, 
			unsigned unitno);
    /*
     * Implement poll
     */
    short (*poll_fn)(poll_table_t *table);
} driver_header_t;

\end{lstlisting}

\subsection{File system}

\subsection{Libraries}

Every operating  environment offers a set of libraries to be used
at application level.
Applications make use of widely known data structures and algorithms
to build even more complex algorithms.
When an Operating System is built as a single process, running application
level threads, the availability of such APIs enable developers to code
highly orthogonal systems, leveraging on the same libraries for drivers,
front ends, interfaces, databases, applications.

DiegOS offers a pletora of data structures
\subsection{Networking}

\section{Drivers interface}

\chapter{File System architecture}

\chapter{Networking infrastructure}

\chapter{The System Console}

\chapter{Debug infrastructure}

\chapter{Kernel implementation}
\subsection{Recommendations and other suggestions}
The core functionalities are very simple: spawn a number of execution threads, run all
of them one by one, interrupts \textbf{cannot and must not} invoke a context switch,
synchronize the execution by suspension, share resources with mutexes or spinlocks.

A few words about mutexes and spinlocks and their pros and cons: mutexes have a more complex
code path and disable or enable interrupts to avoid contention within the scheduler, while
spinlocks are very light and simple.
On reverse, a thread waiting to acquire a lock on a mutex will enter a wait queue, thus it will
sit and wait (and shut up!) until its time has come to run and gain a lock; a thread waiting to
acquire a lock on a spinlock will continuosly suspend and thus will be rescheduled until its
time has come to gain a lock.

The balance is, more complexity but lesser CPU usage, opposed to extreme simplicity but a busy CPU.
My suggestion is to use spinlocks for very fast and short critical sections, whereas managing mutexes
would be worser and slower; make use of mutexes if you need heavy computations inside the critical 
section, as all other contending thread will be waiting and won't be scheduled at all, freeing up the 
CPU and letting the locking thread complete its tasks as fast as possible.

\end{document}

